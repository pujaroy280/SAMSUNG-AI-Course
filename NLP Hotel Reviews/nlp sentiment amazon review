{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNkx4+WyAFybWZR+dHX6TXy"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZR2BGRrZBRTc","executionInfo":{"status":"ok","timestamp":1680121459355,"user_tz":240,"elapsed":29264,"user":{"displayName":"Teneika Askew","userId":"09525020931033006609"}},"outputId":"a8a4a884-0341-4198-bb12-1603dfb93d41"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","/content/drive/My Drive/Colab Notebooks/NLP Hotel Reviews\n"]}],"source":["import pandas as pd\n","from google.colab import drive\n","drive.mount('/content/drive')\n","%cd '/content/drive/My Drive/Colab Notebooks/NLP Hotel Reviews'\n","df = pd.read_csv('amazon_baby.csv')#getting rid of null values\n","df = df.dropna()\n","\n","import numpy as np\n","np.random.seed(34)\n","df1 = df.sample(frac = 0.3)#Taking a 30% representative sample\n","df1['sentiments'] = df1.rating.apply(lambda x: 0 if x in [1, 2] else 1)#Adding the sentiments column\n","#https://www.kaggle.com/datasets/sameersmahajan/reviews-of-amazon-baby-products"]},{"cell_type":"code","source":["X = df1['review']\n","y = df1['sentiments']"],"metadata":{"id":"cRbi4512CjQr","executionInfo":{"status":"ok","timestamp":1680121493671,"user_tz":240,"elapsed":218,"user":{"displayName":"Teneika Askew","userId":"09525020931033006609"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, \n","                                        test_size = 0.5, random_state=24)\n","\n","from sklearn.feature_extraction.text import CountVectorizer\n","cv = CountVectorizer()\n","#Vectorizing the text data\n","ctmTr = cv.fit_transform(X_train)\n","X_test_dtm = cv.transform(X_test)\n","\n","\n","from sklearn.linear_model import LogisticRegression\n","#Training the model\n","lr = LogisticRegression()\n","lr.fit(ctmTr, y_train)\n","\n","#Accuracy score\n","lr_score = lr.score(X_test_dtm, y_test)\n","\n","print(\"Results for Logistic Regression with CountVectorizer\")\n","print(lr_score)\n","\n","#Predicting the labels for test data\n","y_pred_lr = lr.predict(X_test_dtm)\n","\n","from sklearn.metrics import confusion_matrix\n","#Confusion matrix\n","cm_lr = confusion_matrix(y_test, y_pred_lr)\n","tn, fp, fn, tp = confusion_matrix(y_test, y_pred_lr).ravel()\n","print(tn, fp, fn, tp)\n","\n","#True positive and true negative rates\n","tpr_lr = round(tp/(tp + fn), 4)\n","tnr_lr = round(tn/(tn+fp), 4)\n","print(tpr_lr, tnr_lr)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1baS9tkTCn4Z","executionInfo":{"status":"ok","timestamp":1680121505535,"user_tz":240,"elapsed":11641,"user":{"displayName":"Teneika Askew","userId":"09525020931033006609"}},"outputId":"2bd8dde0-e641-4be4-cf7f-d415b6d52036"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Results for Logistic Regression with CountVectorizer\n","0.9027706703706412\n","2336 1607 1053 22362\n","0.955 0.5924\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n"]}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, \n","                                        test_size = 0.5, random_state=123)\n","#Vectorizing the text data\n","cv = CountVectorizer()\n","ctmTr = cv.fit_transform(X_train)\n","X_test_dtm = cv.transform(X_test)\n","\n","from sklearn import svm\n","#Training the model\n","svcl = svm.SVC()\n","svcl.fit(ctmTr, y_train)\n","svcl_score = svcl.score(X_test_dtm, y_test)\n","print(\"Results for Support Vector Machine with CountVectorizer\")\n","print(svcl_score)\n","y_pred_sv = svcl.predict(X_test_dtm)\n","\n","#Confusion matrix\n","cm_sv = confusion_matrix(y_test, y_pred_sv)\n","tn, fp, fn, tp = confusion_matrix(y_test, y_pred_sv).ravel()\n","print(tn, fp, fn, tp)\n","tpr_sv = round(tp/(tp + fn), 4)\n","tnr_sv = round(tn/(tn+fp), 4)\n","print(tpr_sv, tnr_sv)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-zVEDfwmC3d8","executionInfo":{"status":"ok","timestamp":1680122203668,"user_tz":240,"elapsed":693442,"user":{"displayName":"Teneika Askew","userId":"09525020931033006609"}},"outputId":"e2a7489f-6a84-4fac-92d7-13c2870a0900"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Results for Support Vector Machine with CountVectorizer\n","0.8909276993932305\n","1146 2783 201 23228\n","0.9914 0.2917\n"]}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, \n","                                        test_size = 0.5, random_state=143)\n","\n","from sklearn.feature_extraction.text import CountVectorizer\n","cv = CountVectorizer()\n","ctmTr = cv.fit_transform(X_train)\n","X_test_dtm = cv.transform(X_test)\n","\n","from sklearn.neighbors import KNeighborsClassifier\n","knn = KNeighborsClassifier(n_neighbors=5)\n","knn.fit(ctmTr, y_train)\n","knn_score = knn.score(X_test_dtm, y_test)\n","print(\"Results for KNN Classifier with CountVectorizer\")\n","print(knn_score)\n","y_pred_knn = knn.predict(X_test_dtm)\n","\n","#Confusion matrix\n","cm_knn = confusion_matrix(y_test, y_pred_knn)\n","tn, fp, fn, tp = confusion_matrix(y_test, y_pred_knn).ravel()\n","print(tn, fp, fn, tp)\n","tpr_knn = round(tp/(tp + fn), 4)\n","tnr_knn = round(tn/(tn+fp), 4)\n","print(tpr_knn, tnr_knn)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vz6YwudEC7gS","executionInfo":{"status":"ok","timestamp":1680122306855,"user_tz":240,"elapsed":103192,"user":{"displayName":"Teneika Askew","userId":"09525020931033006609"}},"outputId":"b2f73a03-bce4-433f-af12-abedd72b46b8"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Results for KNN Classifier with CountVectorizer\n","0.8545215293515608\n","164 3798 182 23214\n","0.9922 0.0414\n"]}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, \n","                                        test_size = 0.5, random_state=45)\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","\n","#tfidf vectorizer\n","vectorizer = TfidfVectorizer()\n","X_train_vec = vectorizer.fit_transform(X_train)\n","X_test_vec = vectorizer.transform(X_test)\n","from sklearn.linear_model import LogisticRegression\n","lr = LogisticRegression()\n","lr.fit(X_train_vec, y_train)\n","lr_score = lr.score(X_test_vec, y_test)\n","print(\"Results for Logistic Regression with tfidf\")\n","print(lr_score)\n","y_pred_lr = lr.predict(X_test_vec)\n","\n","\n","#Confusion matrix\n","from sklearn.metrics import confusion_matrix\n","cm_knn = confusion_matrix(y_test, y_pred_lr)\n","tn, fp, fn, tp = confusion_matrix(y_test, y_pred_lr).ravel()\n","print(tn, fp, fn, tp)\n","tpr_knn = round(tp/(tp + fn), 4)\n","tnr_knn = round(tn/(tn+fp), 4)\n","print(tpr_knn, tnr_knn)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NW4MdKvcC-93","executionInfo":{"status":"ok","timestamp":1680122311939,"user_tz":240,"elapsed":5095,"user":{"displayName":"Teneika Askew","userId":"09525020931033006609"}},"outputId":"da6dacc0-f9fd-45fa-d829-afd1a6181ccb"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Results for Logistic Regression with tfidf\n","0.9037210322391988\n","1681 2240 394 23043\n","0.9832 0.4287\n"]}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, \n","                                        test_size = 0.5, random_state=55)\n","vectorizer = TfidfVectorizer()\n","X_train_vec = vectorizer.fit_transform(X_train)\n","X_test_vec = vectorizer.transform(X_test)\n","from sklearn import svm\n","#params = {'kernel':('linear', 'rbf'), 'C':[1, 10, 100]}\n","svcl = svm.SVC(kernel = 'rbf')\n","#clf_sv = GridSearchCV(svcl, params)\n","svcl.fit(X_train_vec, y_train)\n","svcl_score = svcl.score(X_test_vec, y_test)\n","print(\"Results for Support Vector Machine with tfidf\")\n","print(svcl_score)\n","y_pred_sv = svcl.predict(X_test_vec)\n","#Confusion matrix\n","from sklearn.metrics import confusion_matrix\n","cm_sv = confusion_matrix(y_test, y_pred_sv)\n","tn, fp, fn, tp = confusion_matrix(y_test, y_pred_sv).ravel()\n","print(tn, fp, fn, tp)\n","tpr_sv = round(tp/(tp + fn), 4)\n","tnr_sv = round(tn/(tn+fp), 4)\n","print(tpr_sv, tnr_sv)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JTnqDTHTDDF6","executionInfo":{"status":"ok","timestamp":1680123188969,"user_tz":240,"elapsed":877032,"user":{"displayName":"Teneika Askew","userId":"09525020931033006609"}},"outputId":"1925e4de-1841-448b-e454-732b5be713a8"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Results for Support Vector Machine with tfidf\n","0.9003582133196871\n","1626 2402 324 23006\n","0.9861 0.4037\n"]}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, \n","                                        test_size = 0.5, random_state=65)\n","vectorizer = TfidfVectorizer()\n","X_train_vec = vectorizer.fit_transform(X_train)\n","X_test_vec = vectorizer.transform(X_test)\n","from sklearn.neighbors import KNeighborsClassifier\n","knn = KNeighborsClassifier(n_neighbors=5)\n","knn.fit(X_train_vec, y_train)\n","knn_score = knn.score(X_test_vec, y_test)\n","print(\"Results for KNN Classifier with tfidf\")\n","print(knn_score)\n","y_pred_knn = knn.predict(X_test_vec)\n","#Confusion matrix\n","cm_knn = confusion_matrix(y_test, y_pred_knn)\n","tn, fp, fn, tp = confusion_matrix(y_test, y_pred_knn).ravel()\n","print(tn, fp, fn, tp)\n","tpr_knn = round(tp/(tp + fn), 4)\n","tnr_knn = round(tn/(tn+fp), 4)\n","print(tpr_knn, tnr_knn)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xNaXFK-oDG4y","executionInfo":{"status":"ok","timestamp":1680127520693,"user_tz":240,"elapsed":4331728,"user":{"displayName":"Teneika Askew","userId":"09525020931033006609"}},"outputId":"8c3fbda6-c20f-47eb-c7de-69ace745c308"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Results for KNN Classifier with tfidf\n","0.8619782147817823\n","536 3387 389 23046\n","0.9834 0.1366\n"]}]},{"cell_type":"code","source":["df1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":169},"id":"IDOD7KOtDKh5","executionInfo":{"status":"error","timestamp":1680222314142,"user_tz":240,"elapsed":541,"user":{"displayName":"Teneika Askew","userId":"09525020931033006609"}},"outputId":"6fd1a0bc-caa3-462a-8312-d50542ac804f"},"execution_count":1,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-6a861a8b3f1a>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'df1' is not defined"]}]},{"cell_type":"code","source":[],"metadata":{"id":"FsF4TCkIDblo"},"execution_count":null,"outputs":[]}]}